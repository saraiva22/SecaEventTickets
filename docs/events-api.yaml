openapi: 3.0.1
info:
  title: SECA API
  description: This is a API for managing events
  contact:
    email: a49465&49462@alunos.isel.pt
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
servers:
  - description: Localhost server for testing API
    url: http://localhost:8080/

security:
  - bearerAuth: []
tags:
  - name: Events
  - name: Users
  - name: Groups
paths:
  /events:
    get:
      tags:
        - Events
      summary: Search events by name.
      description: Events by name.
      operationId: getSearchedEvents
      parameters:
        - name: keyword
          in: query
          description: Query to match in event title
          schema:
            type: string
          required: true
        - name: s
          in: query
          description: number of events per page (page size)
          schema:
            minimum: 1
            default: 30
            type: integer
          required: false
        - name: p
          in: query
          description: page number
          schema:
            minimum: 0
            default: 1
            type: integer
          required: false
      responses:
        200:
          description: all events received
          content:
            application/json:
              schema:
                type: array
                items:
                $ref: "#/components/schemas/Events"
        400:
          $ref: "#/components/responses/400BadRequest"
  /events/popular:
    get:
      tags:
        - Events
      summary: gets most popular events
      description: Lists most popular events
      operationId: getPopularEvents
      parameters:
        - name: s
          in: query
          description: number of events per page (page size)
          schema:
            minimum: 1
            default: 30
            type: integer
          required: false
        - name: p
          in: query
          description: page number
          schema:
            minimum: 0
            default: 1
            type: integer
          required: false
      responses:
        200:
          description: most popular events received
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Events"
        400:
          $ref: "#/components/responses/400BadRequest"
  /users:
    post:
      tags:
        - Users
      summary: adds a user
      description: Adds a user to the system
      operationId: createUser
      security: []
      requestBody:
        description: User to add
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewUser"
        required: true
      responses:
        201:
          description: user created
          content:
            application/json:
              schema:
                required:
                  - token
                type: object
                properties:
                  token:
                    type: string
                    format: uuid
        400:
          description: Invalid input, object invalid
          content: {}
  /groups:
    get:
      tags:
        - Groups
      summary: get all groups
      description: Lists all existing groups
      operationId: getGroups
      responses:
        200:
          description: get all groups
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Groups"
        400:
          $ref: "#/components/responses/400BadRequest"
    post:
      tags:
        - Groups
      summary: adds a groups
      description: Adds a group to the system
      operationId: createGroup
      security:
        - bearerAuth: []
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Group to add
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewGroup"
        required: true
      responses:
        201:
          description: Group created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NewGroup"
        400:
          description: Invalid input, object invalid
          content: {}
  /groups/{groupId}:
    get:
      tags:
        - Groups
      summary: Get a group given its id
      operationId: getGroupsDetails
      security:
        - bearerAuth: []
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
            format: uuid
        - name: groupId
          in: path
          description: ID of group that to be fetched
          required: true
          schema:
            type: integer
            minimum: 0
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GroupDetails"
        400:
          $ref: "#/components/responses/400BadRequest"
        404:
          $ref: "#/components/responses/404NotFound"
    put:
      tags:
        - Groups
      summary: updates a group
      description: Updates a Group in the system
      operationId: updateGroup
      security:
        - bearerAuth: []
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
            format: uuid
        - name: groupId
          in: path
          description: ID of the group to edit
          required: true
          schema:
            type: integer
      requestBody:
        description: Group to update
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewGroup"
        required: true
      responses:
        201:
          description: group updated
          content: {}
        404:
          $ref: "#/components/responses/404NotFound"
    delete:
      tags:
        - Groups
      summary: Delete a group by ID
      description: Delete a group by ID
      operationId: deleteGroup
      security:
        - bearerAuth: []
      parameters:
        - name: groupId
          in: path
          description: ID of the group to be deleted
          required: true
          schema:
            type: integer
      responses:
        200:
          description: "Group successfully deleted"
          content: {}
        400:
          $ref: "#/components/responses/400BadRequest"
        404:
          $ref: "#/components/responses/404NotFound"
  /groups/{groupId}/events:
    post:
      tags:
        - Groups
      summary: Add an event to a group
      operationId: addGroupEvents
      security:
        - bearerAuth: []
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
            format: uuid
        - name: groupId
          in: path
          description: ID of group that to be fetched
          required: true
          schema:
            type: integer
            minimum: 0
      requestBody:
        description: Group to add
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewGroupEvent"
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Groups"
        400:
          $ref: "#/components/responses/400BadRequest"
        404:
          $ref: "#/components/responses/404NotFound"
  /groups/{groupId}/events/{eventsId}:
    delete:
      tags:
        - Groups
      summary: Get an event from all the events in a given group with its ID
      operationId: getGroupEvent
      security:
        - bearerAuth: []
      parameters:
        - name: groupId
          in: path
          description: ID of group that to be fetched
          required: true
          schema:
            type: string
            format: uuid
        - name: eventId
          in: path
          description: ID of event that to be fetched
          required: true
          schema:
            type: integer
            minimum: 0
      responses:
        200:
          description: "Group successfully deleted"
          content: {}
        400:
          $ref: "#/components/responses/400BadRequest"
        404:
          $ref: "#/components/responses/404NotFound"
components:
  securitySchemes:
    bearerAuth: # arbitrary name for the security scheme
      type: http
      scheme: bearer
  schemas:
    Events:
      allOf:
        - $ref: "#/components/schemas/Events"
        - type: object
          required:
            - name
            - text
          properties:
            id:
              type: integer
              example: 1
            name:
              type: string
              example: "Feira do leit√£o"
            description:
              type: string
              example: "Feira tradicional do Minho"
    NewUser:
      allOf:
        - $ref: "#/components/schemas/NewUser"
        - type: object
          required:
            - id
            - username
          properties:
            id:
              type: integer
              example: 1
            username:
              type: string
              example: Francisco
    Groups:
      allOf:
        - $ref: "#/components/schemas/Groups"
        - type: object
          required:
            - groupId
          properties:
            id:
              type: integer
              example: 1
    GroupDetails:
      allOf:
        - $ref: "#/components/schemas/GroupDetails"
        - type: object
          required:
            - groupId
            - nameGroup
            - description
            - events
            - nameEvent
            - date
          properties:
            groupId:
              type: object
              example:
                {
                  nameGroup: "Football events",
                  description: "This group is only for football events",
                  events:
                    [
                      {
                        nameEvent: "Benfica x Sporting",
                        date: 12/11/2023,
                        segment: "ainda n√£o sei",
                        genre: Futebol,
                      },
                      {
                        nameEvent: "Ocean√°rio de Lisboa",
                        date: 04/01/2023,
                        segment: "ainda n√£o sei",
                        genre: Fam√≠lia,
                      },
                    ],
                }
    NewGroup:
      required:
        - name
        - description
      type: object
      properties:
        name:
          type: string
          example: Football events
        description:
          type: string
          example: This group is only for football events
    Group:
      allOf:
        - $ref: "#/components/schemas/NewGroup"
        - type: object
          required:
            - groupId
          properties:
            id:
              type: integer
              example: 1
    NewGroupEvent:
      allOf:
        - $ref: "#/components/schemas/NewGroupEvent"
        - type: object
          required:
            - eventId
          properties:
            id:
              type: integer
              example: 1
    MissingParameter:
      type: object
      properties:
        error:
          type: string
          example: "Missing required parameter"
    InvalidBody:
      type: object
      properties:
        error:
          type: string
          example: "Invalid body content"
    NotFound:
      type: object
      properties:
        uri:
          type: string
          format: uri
          example: "/tasks/1"
        description:
          type: string
          example: "Task with id 1 not found"
  responses:
    404NotFound:
      description: "Resource not found"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/NotFound"
    400BadRequest:
      description: "Invalid Request because of a missing Parameter or invalid body content"
      content:
        application/json:
          schema:
            oneOf:
              - $ref: "#/components/schemas/MissingParameter"
              - $ref: "#/components/schemas/InvalidBody"
